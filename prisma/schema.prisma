generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  userDetails   UserDetails? @relation("UserToUserDetails")
}

model UserDetails {
  id               String     @id @default(uuid())
  name             String
  email            String?    @unique
  password         String?
  role             Boolean
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  userId           String     @unique
  resetToken       String?
  resetTokenExpiry DateTime?
  addresses        Address[]
  cart             Cart?
  orders           Order[]
  user             User       @relation("UserToUserDetails", fields: [userId], references: [id])
  reviews          Review[] // Relation to reviews
  wishlistItems    Wishlist[] // Add relation to Wishlist
}

model Address {
  id      String      @id @default(uuid())
  userId  String
  street  String
  city    String
  state   String
  country String
  zipCode String
  user    UserDetails @relation(fields: [userId], references: [id])
}

model ProductDetails {
  id          String      @id @default(uuid())
  name        String
  description String?
  price       Int
  stock       Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  image       String[]
  category    String[]
  cartItems   CartItem[]
  orderItems  OrderItem[]
  reviews     Review[] // Relation to reviews
  wishlist    Wishlist[]
}

model Review {
  id          String         @id @default(uuid())
  productId   String
  userId      String
  rating      Int
  description String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  product     ProductDetails @relation(fields: [productId], references: [id])
  user        UserDetails    @relation(fields: [userId], references: [id])
}

model Wishlist {
  id        String         @id @default(uuid())
  userId    String
  productId String
  createdAt DateTime       @default(now())
  user      UserDetails    @relation(fields: [userId], references: [id]) // Relation to UserDetails
  product   ProductDetails @relation(fields: [productId], references: [id]) // Relation to ProductDetails

  @@unique([userId, productId]) // Ensure a product can only be added once to a user's wishlist
}

model Cart {
  id     String      @id @default(uuid())
  userId String      @unique
  user   UserDetails @relation(fields: [userId], references: [id])
  items  CartItem[]
}

model CartItem {
  id        String         @id @default(uuid())
  cartId    String
  productId String
  quantity  Int
  cart      Cart           @relation(fields: [cartId], references: [id])
  product   ProductDetails @relation(fields: [productId], references: [id])

  @@unique([cartId, productId])
}

model Order {
  id        String      @id @default(uuid())
  userId    String
  total     Float
  paymentId String?  // ✅ Add this field for storing Cashfree payment ID
  status    OrderStatus @default(PENDING)
  createdAt DateTime    @default(now())
  user      UserDetails @relation(fields: [userId], references: [id])
  items     OrderItem[]
}

model OrderItem {
  id        String         @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  order     Order          @relation(fields: [orderId], references: [id])
  product   ProductDetails @relation(fields: [productId], references: [id])
}

enum OrderStatus {
  PENDING
  PAID    // ✅ Add PAID status
  SHIPPED
  DELIVERED
  CANCELLED
}