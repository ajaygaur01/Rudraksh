// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verification_tokens")
}
 

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  userDetails   UserDetails? @relation("UserToUserDetails") // Only define relation name here
}

model UserDetails {
  id        String    @id @default(uuid())
  userId    String?   @unique // Make optional for OAuth users
  user      User?     @relation("UserToUserDetails", fields: [userId], references: [id]) // Define relation properly here
  name      String
  email     String    @unique
  password  String?   // Nullable for OAuth users
  role      Boolean
  addresses Address[] 
  orders    Order[]
  cart      Cart?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}




model Address {
  id        String   @id @default(uuid())
  user      UserDetails @relation(fields: [userId], references: [id])
  userId    String
  street    String
  city      String
  state     String
  country   String
  zipCode   String
}

model ProductDetails {
  id          String   @id @default(uuid())
  name        String
  description String?
  image       String[]
  price       Float
  stock       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  cartItems   CartItem[]
  orderItems  OrderItem[]
}

model Cart {
  id       String    @id @default(uuid())
  user     UserDetails @relation(fields: [userId], references: [id])
  userId   String   @unique
  items    CartItem[]
}

model CartItem {
  id         String   @id @default(uuid())
  cart       Cart     @relation(fields: [cartId], references: [id])
  cartId     String
  product    ProductDetails  @relation(fields: [productId], references: [id])
  productId  String
  quantity   Int
}

model Order {
  id         String      @id @default(uuid())
  user       UserDetails @relation(fields: [userId], references: [id])
  userId     String
  items      OrderItem[]
  total      Float
  status     OrderStatus @default(PENDING)
  createdAt  DateTime    @default(now())
}

model OrderItem {
  id         String   @id @default(uuid())
  order      Order    @relation(fields: [orderId], references: [id])
  orderId    String
  product    ProductDetails  @relation(fields: [productId], references: [id])
  productId  String
  quantity   Int
  price      Float
}


enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
}